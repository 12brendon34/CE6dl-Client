#pragma once
#include <pch.h>
#include "../TTL.h"

class CLevelView {};
class IBaseCamera {};
class IControlObject {};
class IBatchTracer {};
class IUIElement {};
class CGSSerializer {};
class IVisualizationMeshMgr {};
class IVisualizationMgr {};
class IFXManager {};
class IMovieManager {};
class IUIManager {};
class IGSObject {};
class IPhysicsManager {};
class IRoad {};
class ISimpleObjects {};

struct vec {
	union __m128;
};

struct aabb {
	struct vec origin;
	struct vec span;
};

//CE5
struct spu_occlusion {
	ushort first_volume;
	ushort num_volumes;
};

struct spu_occlusion_data {
	struct spu_occlusion occluder[8];
	ushort vistest_fail_offset[8];
	ushort vistest_pass_offset[8];
	ushort volumes_offset[8];
	ushort planes_offset[8];
	uint total_size;
};

class vec3 {
public:
	float x;
	float y;
	float z;
};
//CE5
struct CTerrainType {
	//undefined field0_0x0;
	//undefined field1_0x1;
	//undefined field2_0x2;
	//undefined field3_0x3;
	struct CLevel* m_pLevel;
	char m_szMapPath[260];
	unsigned char* m_pMap;
	int m_iMapWidth;
	int m_iMapHeight;
	int m_iMapPitch;
	int m_iBPP;
	int m_iWidth;
	int m_iHeight;
	float m_fSizeX;
	float m_fSizeZ;
	float m_fOriginX;
	float m_fOriginZ;
	float m_fSpanX;
	float m_fSpanZ;
	float m_fCenterX;
	float m_fCenterZ;
	float m_fWorldToMapX;
	float m_fWorldToMapZ;
	void* m_pfnSetValue;
	void* m_pfnGetValue;
	int m_iVisRange;
	struct CSurface* m_pSurface;
	struct IMaterial* m_pMaterial;
};

class __declspec(dllimport) ILevel {
public:
	ILevel();
	ILevel(ILevel const&);
	void Activate();
	void ActivateView(CLevelView*);
	void AddControlObject(IControlObject*);
	bool AddUIAnimation(char const*, char const*, char const*);
	void AddUINamedFrameName(char const*);
	//void AddUIResourceTextureId(ttl::string_base<char> const&, ttl::list<ttl::string_base<char>, ttl::allocator>&);
	CLevelView* AddView(ttl::string_base<char> const&, IBaseCamera*, int, int, int, int, bool);
	CLevelView* AddView(ttl::string_base<char> const&, IBaseCamera*, float, float, float, float, bool);
	bool AreTerrainFacesInExtents(vec3 const&, vec3 const&);
	aabb CalcWorldAABB();
	void CallUIManualAutoLayout();
	void ClearPrecachedUITextures();
	void ClearUIMouseState();
	IBatchTracer* CreateBatchTracer() const;
	int CreateConeForceGenerator(vec3 const&, vec3 const&, float, float, float, float, int);
	void CreateLevelProgramaticaly();
	spu_occlusion_data const* CreateOcclusion(vec3 const&, float);
	int CreatePointForceGenerator(vec3 const&, float, float, float, int);
	int CreateSegmentForceGenerator(vec3 const&, vec3 const&, float, float, float, int);
	void Deactivate();
	void DeactivateView(CLevelView*);
	void DeleteAllSounds();
	void DestroyBatchTracer(IBatchTracer*&);
	void DestroyOcclusion(spu_occlusion_data const*);
	void DisableAllCallMethods(int);
	void DisableSaveGameTime();
	bool DoesTextureFileExist(ttl::string_base<char> const&);
	bool DoesUITexureExist(ttl::string_base<char> const&);
	void DumpUsedFiles();
	void EnableInputs(bool);
	void EnableODESafetyValve(bool);
	void EnableOccluder(int, bool);
	void EnableSimpleObjectsRendering(bool);
	void FXEnable(bool);
	//bool FindObjectsInExtents(ttl::vector<IControlObject*>*, aabb const&, CRTTI const*, bool, int*);
	//bool FindObjectsInRadius(ttl::vector<IControlObject*>*, vec3 const&, float, CRTTI const*, bool, int*);
	IUIElement* FindUIScreen(int);
	IUIElement* FindUiScreen(int) const;
	CLevelView* FindView(ttl::string_base<char> const&);
	CGSSerializer* GSSerializerLoad(ttl::string_base<char> const&, ttl::vector<IGSObject*>*);
	void GSSerializerReleaseObjects(CGSSerializer*);
	//void GSSerializerSave(EPlatform::TYPE, ttl::vector<IGSObject*> const&, ttl::string_base<char> const&);
	//void GatherUIResourcesUsed(ttl::list<ttl::string_base<char>, ttl::allocator>&);
	//void GatherUIResourcesUsedByPack(int, ttl::list<ttl::string_base<char>, ttl::allocator>&);
	//void GatherUIResourcesUsedByScreen(int, ttl::list<ttl::string_base<char>, ttl::allocator>&);
	//void GatherUIResourcesUsedBySkin(ttl::string_base<char> const&, ttl::list<ttl::string_base<char>, ttl::allocator>&);
	unsigned long GetAbsoluteTickCount();
	IBaseCamera* GetActiveCamera() const;
	ttl::string_base<wchar_t> const& GetComment() const;
	IVisualizationMeshMgr* GetEditorVisualizationMeshMgr();
	IVisualizationMgr* GetEditorVisualizationMgr();
	IFXManager* GetFXManager();
	IBaseCamera* GetFirstActiveViewCamera();
	bool GetForceViewNoRastOcclusion(CLevelView*);
	int GetFramesCounter() const;
	IMovieManager* GetIMovieManager() const;
	IUIManager* GetIUIManager();
	char const* GetLevelName();
	ttl::string_base<char> GetLevelPath() const;
	float GetLevelUnImportanceFactor() const;
	//void GetLoadedUIScreens(ttl::listm<77, IUIScreen*, ttl::allocator>&, int);
	//static CRTTI const* GetNativeClass();
	int GetNextFreeUIPackId();
	int GetNextIDValue() const;
	int GetNumRoads();
	IGSObject* GetObjectByID(int) const;
	float GetObjectsVisibilityRange() const;
	float GetOceanLevel(vec3 const&, bool) const;
	unsigned short GetPhysicsDebugRenderMode() const;
	IPhysicsManager* GetPhysicsManager();
	float GetRainStrength() const;
	int GetRenderCounter() const;
	bool GetRenderFlag() const;
	IRoad* GetRoadByIndex(unsigned long);
	IRoad* GetRoadByName(char const*);
	//Shapes::IShapeMgr* GetShapeManager();
	ISimpleObjects* GetSimpleObjects();
	vec3 GetSunColor();
	vec3 GetSunDir();
	int GetTerrainMapValue(CTerrainType*, float, float);
	int GetTerrainMapValueSmooth(CTerrainType*, float, float, int);
	vec3 GetTerrainSize();
	int GetTerrainType(float, float) const;
	int GetTerrainTypeSmooth(float, float, int) const;
	vec3 const& GetUICursorPos();
	//IUIEditorInterface* GetUIEditorInterface();
	ttl::string_base<char> const& GetUIFontId(int);
	int GetUIFontsCnt();
	IUIElement* GetUIScreen(int, bool);
	int GetUIScreenIdByScriptName(ttl::string_base<char> const&);
	bool GetUITextureSizes(ttl::string_base<char> const&, vec3&);
	IBaseCamera* GetViewCamera(CLevelView*);
	int GetViewID(CLevelView*) const;
	int GetViewOriginX(CLevelView*) const;
	int GetViewOriginY(CLevelView*) const;
	int GetViewSizeX(CLevelView*) const;
	int GetViewSizeY(CLevelView*) const;
	//void GetVisibleUIScreens(ttl::listm<77, IUIScreen*, ttl::allocator>&, int);
	vec3 GetWindForceAtPos(vec3 const&);
	float GetWindPower() const;
	void HideAllUIScreens(int);
	void HideUIScreen(int);
	void InitFXLongTraceSystem();
	void InitFXSystem();
	//void InitGrid(extents const&, vec2 const&);
	void InitODE();
	void InitReplicator();
	CTerrainType* InitTerrainMap(ttl::string_base<char> const&);
	CTerrainType* InitTerrainMap(ttl::string_base<char> const&, float, float, float, float);
	bool InitTerrainTypeMap(ttl::string_base<char> const&, float, float, float, float);
	void InitUIManager();
	bool InputsEnabled() const;
	bool IsAnyViewActive() const;
	bool IsLoading() const;
	bool IsMuteMaster() const;
	bool IsODEEnable() const;
	bool IsOceanEnabled() const;
	bool IsOnDemandScreen(int) const;
	bool IsSoundMuted() const;
	bool IsTerrain();
	bool IsTimerFrozen() const;
	bool IsUIManagerVisible() const;
	bool IsUIScreenLoaded(int);
	bool IsUIScreenRegistered(int);
	bool IsUIScreenRegisteredForPack(int, int);
	bool IsUIScreenVisible(int);
	bool IsUITextureLoaded(ttl::string_base<char> const&);
	bool IsVisibleAABB(spu_occlusion_data const*, aabb const&) const;
	//bool IsVisibleExtents(spu_occlusion_data const*, extents const&) const;
	void ListenerOnViewActive(CLevelView*, bool);
	//void LoadInput(ISGChunk*);
	void LoadSpeechData(ttl::string_base<char> const&, char const*);
	bool LoadUIFont(ttl::string_base<char> const&, ttl::string_base<char> const&, int, int, ttl::string_base<char> const&, float);
	int LoadUIPack(int);
	//IUIScreen* LoadUIScreen(int);
	int LoadUIScreens(int, ttl::vector<int>*);
	int LoadUISkin(ttl::string_base<char> const&);
	int LoadUISkins(int);
	void LoadUITexture(ttl::string_base<char> const&, ttl::string_base<char> const&, int, int, int, int, int, int, int, int, bool, ttl::string_base<char>);
	void LoadUITextures(ttl::string_base<char> const&);
	void MoveViewToBottom(CLevelView*);
	void MoveViewToTop(CLevelView*);
	void MuteAllSounds();
	void MuteLevelSounds();
	void MuteLevelStreams();
	void MuteMaster(bool);
	//void NativeSGLoadInteractionMap(ISGChunk*);
	//void NativeSGSaveInteractionMap(ISGChunk*);
	void NonDefaultGravityEnable(bool);
	void ODEEnable(bool);
	void OnDynamicSwitchToStatic(int);
	void OnStaticSwitchToDynamic(int);
	void PauseLevelSounds();
	void PauseLevelStreams();
	void PauseSoundCategory(ttl::string_base<char> const&);
	void PixLogic(int);
	void PrecacheUITexture(ttl::string_base<char> const&);
	bool RegisterUIPack(ttl::string_base<char> const&, int);
	int RegisterUIScreen(ttl::string_base<char> const&, int, int, bool, ttl::string_base<char> const&, int);
	bool RegisterUISkin(ttl::string_base<char> const&, int);
	void ReidentifyUIAnimations();
	void ReleasePrecachedUITexture(ttl::string_base<char> const&);
	void ReleaseUIFonts();
	void ReloadAllConstraints(float);
	void ReloadIKScripts(float);
	void ReloadMaterials();
	bool ReloadUIScreen(int);
	void ReloadUIScreens();
	void RemoveControlObject(IControlObject*);
	void RemoveSpeechData(ttl::string_base<char> const&);
	void RemoveTerrainMap(CTerrainType*);
	void RemoveView(CLevelView*);
	void ReplAddVerifyData(char const*, unsigned int, bool);
	void ReplClearRelevancePosition();
	void ReplDumpReceivingPacket(char const*) const;
	void ReplEnableReplication(bool);
	IGSObject* ReplFindGameObject(unsigned __int64, unsigned char);
	unsigned short ReplGetLocalId() const;
	unsigned short ReplGetReceivingFromId() const;
	vec3 ReplGetRelevancePosition(unsigned short) const;
	vec3 ReplGetRelevancePosition() const;
	unsigned short ReplGetSynchronizingTargetId(unsigned int) const;
	void ReplGetSynchronizingTargets(ttl::vector<unsigned short>&) const;
	unsigned int ReplGetSynchronizingTargetsCount() const;
	bool ReplHasRelevancePosition(unsigned short) const;
	bool ReplHasRelevancePosition() const;
	//bool ReplInitialize(MapId const&);
	bool ReplIsReplicationEnabled() const;
	bool ReplIsSynchronizingTargetId(unsigned short) const;
	bool ReplIsValidTargetId(unsigned short) const;
	void ReplSetRelevancePosition(vec3 const&);
	void ReplSetReplicationInterval(float, float);
	void ReplSetReplicationIntervalMultipliers(float, float, float, float);
	void ReplSetSendingInterval(float);
	//void SaveInput(ISGChunk*) const;
	int SaveUIPacks();
	void SetBestGeomLods();
	void SetFXSimulationRange(float);
	void SetFXVisibilityRange(float);
	void SetForceViewNoRastOcclusion(CLevelView*, bool);
	void SetHSMMeshCullSize(float);
	void SetKeepElementsToRenderOnNextShow(bool);
	void SetLevelUnImportanceFactor(float);
	void SetMaxUpdateInterval(float);
	void SetMeshCullDistTreshold(float);
	void SetMeshCullSize(float);
	void SetNextIDValue(int);
	void SetNonDefaultGravity(int, vec3 const&);
	void SetObjectsVisibilityRange(float);
	void SetPhysicsDebugRenderMode(unsigned short);
	void SetRenderFlag(bool);
	void SetSunColor(vec3 const&);
	void SetSunDir(vec3 const&);
	void SetTerrainError(float);
	void SetTerrainMapValue(CTerrainType*, float, float, int);
	void SetTerrainType(float, float, int);
	void SetUICameraFov(float);
	void SetUICursorPos(vec3 const&);
	void SetUIManualAutoLayoutCall(bool);
	static void SetUIUseNewUpdateScheme(bool);
	void SetViewCamera(CLevelView*, IBaseCamera*);
	void SetViewOrigin(CLevelView*, int, int);
	void SetViewOrigin(CLevelView*, float, float);
	void SetViewSize(CLevelView*, int, int);
	void SetViewSize(CLevelView*, float, float);
	void SetWindPower(float);
	void ShowUIManager(bool);
	//void ShowUIScreen(int, IUIData*);
	void Simulate(bool);
	void SpriteClearColor(vec3 const&);
	void SpriteClearScreen(bool);
	void StopAllSpeeches();
	void TerrainBrushDisable();
	void TerrainBrushEnableProcedural(float, float);
	void TerrainBrushEnableTexture(char const*, bool);
	//void TerrainBrushSetExtents(extents const&);
	void TerrainBrushSetPosRadius(vec3 const&, float);
	float TerrainHeight(float, float);
	float TerrainHeightNormal(float, float, vec3*);
	float TimerGetSpeedUp() const;
	void TimerPause();
	void TimerResume();
	void TimerSetForceFromGameTimer(bool);
	void TimerSetLimitDelta(bool);
	void TimerSetSmoothing(int);
	void TimerSetSpeedUp(float);
	void TimerStart();
	void TimerStop();
	void TimerUpdate();
	CLevel* ToCLevel();
	CLevel const* ToCLevel() const;
	void UnMuteAllSounds();
	void UnMuteLevelSounds();
	void UnMuteLevelStreams();
	void UnPauseLevelSounds();
	void UnPauseLevelStreams();
	void UnPauseSoundCategory(ttl::string_base<char> const&);
	bool UnRegisterUIPack(int);
	bool UnRegisterUIScreen(int);
	bool UnRegisterUISkin(ttl::string_base<char> const&);
	int UnloadUIPack(int);
	bool UnloadUIScreen(int);
	int UnloadUIScreens(int);
	void UnloadUIScreens();
	int UnloadUISkin(ttl::string_base<char> const&);
	int UnloadUISkins(int);
	void UnloadUISkins();
	int UnloadUITexture(ttl::string_base<char> const&);
	void UnloadUITextures(ttl::string_base<char> const&);
	//void UpdateBatchTracerGeoms(IBatchTracer*, extents const&, bool, int, int, bool);
	int VI_CreateSet(char const*);
	void VI_DeleteSet(int);
	void VI_Handler_Stopped(int);
	bool VI_IsInterpolating(int) const;
	int VI_StartInterpolationF(char const*, float, float, float);
	int VI_StartInterpolationI(char const*, int, float, float);
	//void VI_StartInterpolationSet(int, ttl::vectorm<51, float> const&, ttl::vectorm<51, float> const&, float, float);
	int VI_StartInterpolationVec3(char const*, vec3 const&, float, float);
	//int VI_StartInterpolationVec4(char const*, vec4 const&, float, float);
	bool VI_StopInterpolation(int);
	void ViewRenderGrass(CLevelView*, bool);
	void ViewRenderObjects(CLevelView*, bool);
	void ViewRenderTerrain(CLevelView*, bool);
	void ViewRenderTinyObjects(CLevelView*, bool);
	void ViewRenderTrees(CLevelView*, bool);
	void ViewRenderWater(CLevelView*, bool);

	//Vtable
	/*
	virtual ~ILevel();
	virtual void ASEQuery_OnWantPlayers();
	virtual void ASEQuery_OnWantRules();
	virtual void ASEQuery_OnWantStatus();
	virtual bool CanLoadCommonAnimsPack();
	virtual bool CanLoadCommonTexturesPack();
	virtual bool CanLoadMeshesPack();
	virtual bool ChromeSpy_IsGameLevel();
	virtual void DisableSpeechGroup(unsigned int);
	virtual void EnableSpeechGroup(unsigned int);
	virtual void GameSpyQuery_OnKeyList(int,int);
	virtual void GameSpyQuery_OnPlayerKey(int,int,int);
	virtual void GameSpyQuery_OnPlayerTeamCount(int);
	virtual void GameSpyQuery_OnServerKey(int,int);
	virtual void GameSpyQuery_OnTeamKey(int,int,int);
	virtual bool GetEnableSunConnectedLights();
	virtual bool GetFaceMimicPresetsNames(ttl::list<ttl::string_base<char>,ttl::allocator> &);
	virtual IAIDataManager * GetIAIDataManager() const;
	virtual IAIManager * GetIAIManager() const;
	virtual IPlayableAreaManager * GetIPlayableAreaManager() const;
	virtual ITimeHandlerManager & GetITimeHandlerMan();
	virtual float GetLastAnimUpdateTime() const;
	virtual INavMeshManager * GetNavMeshManager();
	virtual Anim::IPoseAnimatorManager * GetPoseAnimatorManager();
	virtual ttl::string_base<char> GetSceneRenderScript() const;
	virtual void GetSceneRenderScripts(ttl::vector<ttl::string_base<char> > &) const;
	virtual unsigned int GetSpeechGroupIndex(char const *);
	virtual ttl::vector<ttl::string_base<char> > const & GetSpeechGroups();
	virtual float GetTimePlayed() const;
	virtual CVarSet * GetVarSet();
	virtual CVarSet * GetVarSet() const;
	virtual INavMeshManager * InitializeNavMeshManager();
	virtual void InitializeSimulationInEditor();
	virtual bool IsForbiddenClass(CRTTI const *) const;
	virtual bool IsMainLevel() const;
	virtual void MeshLodDisableLod0(ILevel::ILod0State const *);
	virtual void MeshLodEnableLod0(ILevel::ILod0State const *);
	virtual ILevel::ILod0State * MeshLodStateCreate(ttl::vector<ttl::string_base<char> > const &);
	virtual void MeshLodStateDestroy(ILevel::ILod0State * *);
	virtual void OnActivate();
	virtual void OnBackgroundRenderingDisabled();
	virtual void OnBackgroundRenderingEnabled();
	virtual void OnCameraEnvironmentChange(int);
	virtual void OnDeactivate();
	virtual void OnDestroyedAllObjects();
	virtual void OnDestroyedAllObjectsEditor();
	virtual void OnFailedToFinalizeConnection();
	virtual void OnHearNoise(IGSObject *,IGSObject *,vec3 &,int,float);
	virtual void OnHideSubtitle(int);
	virtual void OnLevelViewsActivated(bool);
	virtual void OnNetConsoleCommand(ttl::string_base<char> const &);
	virtual void OnPhysicsUpdate(float,float);
	virtual void OnPostMoviesUpdate();
	virtual void OnPostSaveUIPack(int);
	virtual void OnPreMoviesUpdate();
	virtual void OnPreSaveUIPack(int);
	virtual void OnQuestsChangedSimpleObjectVisibility(ttl::vector<int> const &,bool);
	virtual void OnReplReplicationDisabled();
	virtual void OnReplReplicationEnabled();
	virtual void OnReplSynchronizationStart(unsigned short);
	virtual void OnReplSynchronizationStop(unsigned short);
	virtual void OnShowSubtitle(ttl::string_base<char> const &,ttl::string_base<char> const &,int,IModelObject *,unsigned int);
	virtual void OnSimpleObjectsMeshGatherResources(ttl::string_base<char> const &,ttl::string_base<char> const &,ttl::list<ttl::string_base<char>,ttl::allocator> &);
	virtual void OnUIScreenHidden(IUIScreen *);
	virtual void OnUIScreenShown(IUIScreen *);
	virtual void OnUiPackUnloaded(int);
	virtual void PostCompileMap();
	virtual void PostCompileTerrain();
	virtual void PreCompileMap();
	virtual void PreCompileTerrain(bool,bool);
	virtual bool QueryContent(ttl::string_base<char> &,char const *,char const *);
	virtual bool QuerySwitchStaticToDynamic(ttl::string_base<char> const &,ttl::string_base<char> const &);
	virtual bool RefreshContentEditor(char const *);
	virtual void ReloadLevelScriptsEditor();
	virtual void SetDissolveObjectLimit(unsigned int);
	virtual void SetEnableSunConnectedLights(bool);
	virtual void SetEngineObject(CGSObject *);
	virtual void SetInGameTimeAndWeather(float,float);
	virtual void SetMainLevel(bool);
	virtual void SetSceneRenderScript(ttl::string_base<char> const &);
	virtual void SetSimulationCamera(vec3 const &,vec3 const &);
	virtual void ShutdownNavMeshManager();
	virtual void ShutdownSimulationInEditor();
	virtual void VI_Handler_InterpolatedTo(int,ttl::vectorm<51,float> const &);
	*/
};