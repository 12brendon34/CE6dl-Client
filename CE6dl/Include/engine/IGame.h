#pragma once
#include "pch.h"
#include "../TTL.h"

class __declspec(dllimport) IGame {
public:
    __cdecl IGame(void);
    __cdecl IGame(class IGame const&);
    virtual ~IGame(void);
    void AcquireInput(bool);
    void AddEditorCriticalError(class ttl::string_base<char> const&);
    void AddEditorWarning(class ttl::string_base<char> const&);
    bool AreDataAuthenticatedToPlayMultiplayer(void) const;
    virtual bool BlockRpackOperationsByPendingPackUiOperations(void) const;
    //void CallOnFrameEnd(class CRTTIVoidFunctor<class IGSObject> const&);
    virtual bool CanUseExternalSpeaker(unsigned int, bool) const;
    static class ttl::string_base<char> CheckForceLangParameter(class ttl::string_base<char>&);
    void ChooseAVICodecAndExit(void);
    virtual void CompileAIData(void) const;
    void CrashQuit(class ttl::string_base<char> const&);
    void DebugDisableHyperThreading(void);
    void DisableAVIRecording(void);
    void DisableContinuousScreenshotRecording(void);
    void DoSdlLoop(void);
    void EnableAVIRecording(class ttl::string_base<char> const&, float, bool);
    void EnableContinuousScreenshotRecording(class ttl::string_base<char> const&, float);
    void EnableDebugSocket(bool, class ttl::string_base<char> const*);
    void EnableDontDropConnetion(bool);
    void EnableFramePipelining(bool);
    void EnableGameRendering(bool);
    void EnableInputPlaying(class ttl::string_base<char> const&, float);
    void EnableInputRecording(class ttl::string_base<char> const&, float, class ttl::string_base<char> const&);
    void ExitGame(void);
    //virtual void FillStatusList(class ttl::vector<struct SCounterLevelInfo>&) const;
    virtual void FlushVM(void);
    virtual void ForceProgressDialogTimeoutReset(void);
    virtual void ForceReloadTexts(void);
    void FreePack(class ttl::string_base<char> const&);
    void FreezeTimersOnLevels(void);
    //virtual void GatherGameResources(class ttl::list<class ttl::string_base<char>, class ttl::allocator>&, enum EGatherGameResourcesMode::TYPE);
    class ILevel* __ptr64 GetActiveLevel(void);
    float GetCameraAspect(void) const;
    virtual class ICampaignManager* __ptr64 GetCampaignManagerInterface(void) const;
    int GetCodePage(void);
    char const* __ptr64* __ptr64 GetCommandLineArgs(void);
    int GetCommandLineArgsCount(void);
    virtual class ttl::string_base<char> GetConfigurationName(void) const;
    class ICountersSystem const* __ptr64 GetCountersSystem(void) const;
    //class ChromeSpy::IDataCollector* __ptr64 GetDataCollector(void) const;
    virtual class ttl::string_base<char> GetDefaultFont(void);
    static class ttl::string_base<char> GetDefaultLocaleID(void);
    static class ttl::string_base<char> GetDefaultSpeechID(class ttl::string_base<char> const&);
    virtual class IDialogManager* __ptr64 GetDialogManager(void) const;
    //virtual class Chatters::IChatterPlayer* __ptr64 GetEditorChatterPlayer(void) const;
    static class ttl::string_base<char> GetFallbackLocaleID(void);
    static class ttl::string_base<char> GetFallbackSpeechID(void);
    //enum EPadDevice::TYPE GetForceShowControllerId(void) const;
    virtual unsigned int GetFrameCounter(void) const;
    virtual class ttl::string_base<char> GetGameCustomText(void);
    virtual char const* __ptr64 GetGameDirectoryName(void) const;
    float GetGameLastTime(void) const;
    float GetGameTime(void) const;
    float GetGameTimeDelta(void) const;
    virtual class ttl::string_base<char> GetGamescriptUIVersion(void);
    virtual int GetGuiSoundBus(void) const;
    virtual class IMapPortalsManager* __ptr64 GetIMapPortalsManager(void) const;
    virtual class IQuestManager* __ptr64 GetIQuestManager(void) const;
    virtual class ttl::string_base<char> GetInvokeScriptPathEditor(void);
    virtual class ILevel* __ptr64 GetLevelEditor(void);
    virtual class ILiveSpaData* __ptr64 GetLiveSpaData(void);
    class ttl::string_base<char> GetLocaleID(void);
    //virtual class Mount::IMountHelper* __ptr64 GetMountHelper(void);
    unsigned int GetMultiplayerFilesCrc(void) const;
    static class CRTTI const* __ptr64 GetNativeClass(void);
    virtual class ttl::string_base<char> GetProperFont(class ttl::string_base<char> const&);
    virtual float GetProperFontScale(class ttl::string_base<char> const&, float, bool);
    //virtual void GetRestAuthData(struct RestClient::SRestAuthData&) const;
    char const* __ptr64 GetRootDirectory(void) const;
    virtual void GetSaveDataUtilityContext(struct SSaveDataUtilityContext&);
    virtual class ISaveManager* __ptr64 GetSaveManager(void);
    float GetScaleToSafeAreaFactor(void) const;
    int GetScreenHeight(void);
    //float GetScreenResolutionScale(enum EScreenResolutionScale::TYPE);
    int GetScreenWidth(void);
    static class ttl::string_base<char> GetSystemLocaleID(void);
    virtual class ITagSystem& GetTagSystem(void);
    virtual class ttl::string_base<char> GetTitleId(void) const;
    virtual class ttl::string_base<char> const& GetTitleStorageFullGameProductId(class ttl::string_base<char> const&) const;
    virtual int GetTitleStorageServiceLabel(class ttl::string_base<char> const&) const;
    virtual class ttl::string_base<char> const& GetTitleStorageStoreCategory(class ttl::string_base<char> const&) const;
    virtual class CVarSet* __ptr64 GetVarSet(void);
    virtual void GetVisibilityFactors(float&, float&);
    virtual char const* __ptr64 GetVoiceLocaleID(void);
    struct HWND__* __ptr64 GethWnd(void) const;
    void GoDedicated(void);
    int Initialize(char*, int, struct HICON__*, struct HICON__*, unsigned long, unsigned long, class IProgressIndicator*);
    static bool InitializeOnlineServices(void*);
    virtual bool IsAnyCommonRpackToLoad(void);
    bool IsAnyRPackLoaded(void);
    virtual bool IsBackButtonPairedWithB(void) const;
    bool IsBackgroundRender(void);
    bool IsBackgroundRenderBlocked(void);
    bool IsDedicatedServer(void);
    //virtual bool IsDlcOwned(enum EGameDlc::TYPE) const;
    //virtual bool IsDlcPresent(enum EGameDlc::TYPE) const;
    //virtual bool IsDlcProvidingData(enum EGameDlc::TYPE, int) const;
    bool IsEditorGameMode(void);
    bool IsFontStyle(class ttl::string_base<char> const&);
    bool IsGameInEditor(void) const;
    bool IsGameInEditorRunning(void);
    bool IsGameRenderingEnabled(void);
    bool IsGuiEditorMode(void);
    virtual bool IsLowViolence(void) const;
    virtual bool IsNetPlayerPlaying(int);
    static bool IsOnlineServicesInitialized(void);
    virtual bool IsPendingActiveProfileHandlingEnabled(void);
    bool IsRenderUiInEditor(void);
    virtual bool IsRestUsingLocalFiles(void) const;
    virtual bool IsStartButtonPairedWithA(void) const;
    virtual bool IsSystemUIShowing(void);
    virtual bool IsTitleStorageStoreCategory(class ttl::string_base<char> const&) const;
    bool IsUseScaleToSafeArea(void) const;
    bool IsWPFInteropMode(void);
    bool LoadFontsScript(class ttl::string_base<char> const&, bool);
    bool LoadFontsStyleScript(class ttl::string_base<char> const&);
    class ILevel* __ptr64 LoadModule(class ttl::string_base<char> const&, class IGSObject*, class IProgressIndicator*);
    struct SLoadModuleData* __ptr64 LoadModuleBegin(class ttl::string_base<char> const&, class IGSObject*, class IProgressIndicator*);
    class ILevel* __ptr64 LoadModuleEnd(struct SLoadModuleData*, bool);
    bool LoadModuleFinished(struct SLoadModuleData*);
    //bool LoadPack(class ttl::string_base<char> const&, bool, bool, struct IGame::SRPackHandle**);
    virtual void LobbyCallback_OnBecomeMaster(void);
    struct SGameAddressEos const LobbyGetClientAddress(unsigned int);
    struct SPlayerIdEos LobbyGetClientPlayerId(unsigned int);
    class ttl::string_base<wchar_t> const LobbyGetClientProfileName(unsigned int);
    unsigned int LobbyGetMasterNetId(void);
    bool LobbyIsNetworkIdValid(unsigned int);
    //virtual enum EDisconnectReason::TYPE Lobby_IsGameJoinableThread(enum ETeam::TYPE);
    virtual bool Lobby_IsGameVisibleByScannerThread(void);
    virtual void Lobby_OnCreateInternetSessionFailed(void);
    virtual void Lobby_OnFailedSignInForInviteAsync(bool);
    virtual void Lobby_OnInviteAccepted(struct SGameSearchResult const&, bool, struct SPlayerIdEos, unsigned long);
    virtual void Lobby_OnInviteReceived(struct SGameSearchResult const&, bool, struct SPlayerIdEos, unsigned long);
    //virtual void Lobby_OnInviteRejected(struct SGameSearchResult const&, enum EInviteRejectReason::TYPE);
    virtual void Lobby_OnSessionInviteReceived(class ttl::string_base<char> const&);
    virtual int Main(void);
    void MsgSend(unsigned int, unsigned char const*, unsigned int);
    virtual void NonInteractiveSequenceBegin(void);
    virtual void NonInteractiveSequenceEnd(void);
    virtual void NotifyXboxOffers(class ttl::vector<struct SXboxOfferReport> const&);
    virtual void OnAchievementWritten(unsigned long);
    virtual void OnAchievementsReloaded(void);
    virtual void OnActivePlayerSigningOut(void);
    virtual void OnBlockInputProcessing(void);
    virtual void OnBubbleEnter(class ttl::string_base<char> const&);
    virtual void OnBubbleLeave(class ttl::string_base<char> const&);
    virtual void OnChunkInstalled(class ttl::string_base<char> const&);
    virtual void OnContentChanged(void);
    virtual void OnContentUpdateBegin(void);
    virtual void OnContentUpdateEnd(void);
    virtual void OnCreatePLS(void);
    virtual void OnDeleteSaveGameUtilityFinished(void);
    virtual bool OnDemoTimeoutPassed(void);
    virtual void OnEntitlementsChanged(void);
    virtual void OnFinishedLoadingLevelEditor(class ttl::string_base<char> const&);
    virtual void OnGameResuming(void);
    virtual void OnGameSuspending(void);
    virtual void OnInitialize(void);
    virtual void OnInitializePLS(void);
    virtual void OnLiveConnectionChanged(long);
    virtual void OnLoadCommonRpacks(void);
    virtual void OnLobbyAntiCheatStatusChanged(void);
    virtual void OnLobbyBecameMaster(void);
    virtual void OnLobbyErrorRemovedFromSystem(int);
    virtual void OnLobbyFullVersionEnabled(void);
    virtual void OnLobbyGamePresenceOffline(void);
    virtual void OnLobbyInactiveUserInvited(struct SPlayerIdEos const&);
    //virtual void OnLobbyInviteAcceptingFailure(enum EDisconnectReason::TYPE);
    virtual void OnLobbyJoined(void);
    virtual void OnLobbyLeft(class LobbyDisconnectError);
    virtual void OnLobbyNatChanged(void);
    virtual void OnLobbyPartyGameCreated(void);
    //virtual void OnLobbyPartyGameCreationFailure(enum EDisconnectReason::TYPE);
    virtual void OnLobbyPartyGameJoined(struct SGameSearchResult const&);
    //virtual void OnLobbyPartyGameJoiningFailure(enum EDisconnectReason::TYPE);
    virtual void OnLobbyPartyGameJoiningNotAvailable(void);
    virtual void OnLobbyPartyGameJoiningReady(struct SGameSearchResult const&);
    //virtual void OnLobbyRemotePeerFailedJoining(unsigned int, enum EDisconnectReason::TYPE);
    virtual void OnLobbyRemotePeerJoined(unsigned int);
    //virtual void OnLobbyRemotePeerLeft(unsigned int, enum EDisconnectReason::TYPE);
    //virtual void OnLobbyRemotePeerStartedJoining(unsigned int, enum ETeam::TYPE);
    //virtual void OnLobbySessionCreateFailure(enum ELobbyMode::TYPE, enum EDisconnectReason::TYPE);
    //virtual void OnLobbySessionCreateSuccess(enum ELobbyMode::TYPE);
    virtual void OnLobbySessionEnd(class ttl::string_base<wchar_t> const&);
    virtual void OnLobbySessionEnd(void);
    virtual void OnLobbySessionStart(class ttl::string_base<wchar_t> const&);
    virtual void OnMovieEnded(void);
    virtual void OnMovieStarted(void);
    virtual void OnMsgReceived(unsigned int, unsigned char const*, unsigned int);
    virtual void OnNetworkCablePlugged(void);
    virtual void OnNetworkCableUnplugged(void);
    virtual void OnNetworkGameDestroyed(void);
    void OnPaint(void);
    virtual void OnPostDestroyLevelInGIEMode(char const*);
    virtual void OnPostLoadLevelInGIEMode(char const*);
    virtual void OnPostResetRenderer(void);
    virtual void OnPreDestroyLevelInGIEMode(char const*);
    virtual void OnPreInitialize(char const**, int);
    virtual void OnPreLoadLevelInGIEMode(char const*);
    virtual void OnProfileCorrupted(void);
    virtual void OnProfileDataRemotelyChanged(void);
    virtual void OnProfileLoaded(bool);
    virtual void OnProfileNotOwner(void);
    virtual void OnProfileUnloaded(void);
    virtual void OnReadErrorException(void);
    virtual void OnReloadAnimationsScr(void);
    virtual void OnRendererInitialized(void);
    virtual void OnReplLocalIdChanged(unsigned short, unsigned short);
    virtual void OnReplTargetJoined(unsigned short, unsigned int);
    virtual void OnReplTargetLeft(unsigned short, unsigned int);
    //virtual void OnShowKeyboardUIXBox(struct mpl::_MPLOVERLAPPED**, class IConsolesKeyboardCallback*, wchar_t**);
    virtual void OnSignInChanged(void);
    virtual void OnSignInResult(int);
    virtual void OnStorageDeviceChanged(void);
    virtual void OnStorageDeviceSelectionCompleted(bool);
    virtual void OnStorageImportAvailabilityCheckCompleted(bool);
    virtual void OnStorageImportCompleted(bool, int);
    virtual void OnSwitchActiveUserRequest(void);
    virtual void OnSystemUIClosed(void);
    virtual void OnSystemUIOpened(void);
    //virtual void OnTitleStorageSettingLoaded(class parser::func_iterator&);
    virtual void OnUnblockInputProcessing(void);
    virtual void OnValidateSettings(void);
    virtual void OnWindowActivate(bool);
    virtual void OnWriteProfileCancelAsync(int);
    virtual void OnWriteProfileError(int, bool);
    virtual void OnWriteProfileStart(int);
    virtual void OnWriteProfileStartAsync(int);
    virtual void OnWriteProfileStopAsync(int, bool, bool);
    virtual void OnWriteProfileSuccess(int);
    void PauseContinuousScreenshotRecording(bool);
    void PollSdlEvents(void);
    //virtual void PopulateRestUserData(class ttl::map<class ttl::string_base<char>, class ttl::string_base<char>, struct ttl::less<class ttl::string_base<char> >, class ttl::allocator>&) const;
    //virtual void QueryChatterPlayerTexts(class ttl::map<class ttl::string_base<char>, class ttl::vectorm<30, class ttl::string_base<char> >, struct ttl::less<class ttl::string_base<char> >, class ttl::allocator>&) const;
    virtual void QueryTextResourcesUsed(class ILocalizationManager&) const;
    class ttl::string_base<char> const ReadAdditionalTextFromInputFile(class ttl::string_base<char> const&);
    void RecordGameplayClip(class ttl::string_base<wchar_t>, class ttl::string_base<wchar_t>, float, float, float, class IRecorderClientCallback*);
    virtual void RegisterEditorRenderOption(void);
    bool RegisterFontStyle(class ttl::string_base<char> const&, class ttl::string_base<char> const&, float, float);
    void RemoveFontStyle(class ttl::string_base<char> const&);
    void RemoveFontStyles(void);
    void RemoveFonts(void);
    //void RemoveFromFrameEnd(class CRTTIVoidFunctor<class IGSObject> const&);
    //void RemoveFromFrameEnd(class IGSObject*);
    void ReplAddVerifyData(char const*, unsigned int, bool);
    void ReplDump(char const*) const;
    void ReplEnableReplicationIntervalChange(bool);
    void ReplGetConnectedTargets(class ttl::vector<unsigned short>&) const;
    unsigned int ReplGetConnectedTargetsCount(void) const;
    unsigned short ReplGetLocalId(void) const;
    unsigned int ReplGetNetworkId(unsigned short) const;
    unsigned short ReplGetTargetId(unsigned int) const;
    bool ReplInitialize(void);
    bool ReplIsConnectedTargetId(unsigned short) const;
    void ReplSetReplicationIntervalMultipliers(float, float, float, float);
    void ResetPerformanceTest(void);
    virtual void RestartTimeoutTimer(void);
    void RestoreLevelsTimersState(void);
    void SaveLevelsTimersState(void);
    void SetDefaultFont(class ttl::string_base<char> const&);
    void SetDefaultModuleStartTime(float);
    virtual void SetEngineObject(class CGSObject*);
    virtual void SetFocusOnWindow(void);
    virtual void SetGameDirectories(char const*, char const*, char const*);
    void SetGameName(class ttl::string_base<char> const&);
    void SetGameNameExplicit(class ttl::string_base<wchar_t> const&);
    void SetLoadingPercentage(float, float);
    bool SetLocaleID(char const*) const;
    virtual void SetPS3TitleId(char*, int);
    virtual void SetProperty(class ttl::string_base<char> const&, class CRTTIVariant const&);
    void SetRenderDebugVis(bool);
    virtual void SetRestEnabled(bool);
    bool SetRootDirectory(char const*);
    void SetSafeMode(bool);
    void SetScreenshotParams(int, int);
    bool SetSpeechID(char const*, bool) const;
    void SetSpeedUpInternalOnLevels(float);
    virtual void SetTitleId(class ttl::string_base<char> const&);
    //virtual void SetTrialStatusFromServer(enum ETrialStatus::TYPE);
    void SetUseScaleToSafeArea(bool, float);
    virtual void SetVMWorkSize(unsigned int);
    virtual void SetVisibilityFactors(float, float);
    virtual void SetXbox360TitleId(int);
    void SetXboxOneMatchHopper(int);
    virtual void ShowNetworkWaitScreen(bool);
    static void ShutdownOnlineServices(void);
    void StartAVIRecording(void);
    void StartInputPlaying(class ttl::string_base<char> const&);
    void StartInputRecording(class ttl::string_base<char> const&);
    void StartSoundRecording(class ttl::string_base<char> const&);
    void StopAVIRecording(void);
    void StopInputPlaying(void);
    void StopInputRecording(void);
    void StopSoundRecording(void);
    //enum IGame::StreamStatus StreamIsFinished(struct IGame::SRPackStreamHandle*, bool);
    //struct IGame::SRPackStreamHandle* __ptr64 StreamLoadMesh(struct IGame::SRPackHandle*, class ttl::string_base<char> const&, int);
    //void StreamUnloadMesh(struct IGame::SRPackStreamHandle*);
    void TakeScreenshot(class ttl::string_base<char> const&);
    void TakeScreenshot(class ttl::string_base<char> const&, int, int);
    void TakeScreenshot(void);
    void TimersDefaultFrozen(bool);
    void TimersNextStep(float);
    void TimersStart(void);
    void TimersStop(void);
    void TimersUpdate(void);
    void TimersUpdateFromServer(float);
    void TimersUpdateSkip(void);
    class CGame* __ptr64 ToCGame(void);
    class CGame const* __ptr64 ToCGame(void) const;
    void UnFreezeTimersOnLevels(void);
    virtual bool VideoSettingsIsFullScreen(void);
    void WaitForPipelineThreads(void);
};